name: Cherry-Pick Workflow

on:
  pull_request:
    types: [closed]

env:
  GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  WEBHOOK_URL: https://hook.us1.make.com/dha28pg49qkklv1c142ti36c4auvld8f

jobs:
  cherry-pick:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Check for !after command in comments
        run: |
          comments=$(curl -s -H "Authorization: token $GITHUB_TOKEN" ${{ github.event.pull_request.comments_url }})
          branch=$(echo "$comments" | jq -r '.[] | select(.body | contains("!after")) | .body' | grep -oP '!after \K\S+' || echo "none")
          echo "branch=$branch" >> $GITHUB_ENV

      - name: Cherry-pick the merge commit
        if: env.branch != 'none'
        run: |
          git fetch origin
          new_branch="cherry-pick/${{ github.event.pull_request.number }}-${{ github.event.pull_request.merge_commit_sha }}"
          git checkout -b $new_branch origin/$branch
          git cherry-pick ${{ github.event.pull_request.merge_commit_sha }} || (
            echo "Cherry-pick conflict detected. Attempting to resolve..."
            git cherry-pick --abort
            git reset --hard
            exit 1
          )
          git push origin $new_branch
          echo "new_branch=$new_branch" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create a pull request
        if: env.branch != 'none'
        run: |
          pr_title="Cherry-pick PR #${{ github.event.pull_request.number }}"
          pr_body="This PR cherry-picks commit from PR #${{ github.event.pull_request.number }}"
          pr_response=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"title\":\"$pr_title\",\"head\":\"$new_branch\",\"base\":\"$branch\",\"body\":\"$pr_body\",\"maintainer_can_modify\":true}" \
            https://api.github.com/repos/${{ github.repository }}/pulls)
          pr_url=$(echo "$pr_response" | jq -r '.html_url')
          curl -s -X PUT -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"merge_method\":\"squash\"}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$(echo "$pr_response" | jq -r '.number')/merge
          echo "pr_url=$pr_url" >> $GITHUB_ENV
        continue-on-error: true

      - name: Send webhook notification
        if: always()
        run: |
          result="success"
          if [ -z "$pr_url" ]; then
            result="failure"
          fi
          payload=$(jq -n \
            --arg pr_url "${pr_url:-N/A}" \
            --arg pr_author "${{ github.event.pull_request.user.login }}" \
            --arg pr_title "${{ github.event.pull_request.title }}" \
            --arg result "$result" \
            '{ pr_url: $pr_url, pr_author: $pr_author, pr_title: $pr_title, result: $result }')
          curl -X POST -H "Content-Type: application/json" -d "$pa
