name: Cherry-Pick Workflow

on:
  pull_request:
    types: [closed]

env:
  WEBHOOK_URL: https://hook.us1.make.com/dha28pg49qkklv1c142ti36c4auvld8f

jobs:
  cherry-pick:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Check for !after command in comments
        id: check_comment
        uses: actions/github-script@v6
        with:
          script: |
            const commentsUrl = context.payload.pull_request.comments_url;
            const comments = await github.paginate(commentsUrl);
            const match = comments.find(comment => comment.body.includes('!after'));
            if (match) {
              const branch = match.body.match(/!after (\S+)/)[1];
              core.setOutput('branch', branch);
            } else {
              core.setOutput('branch', 'none');

      - name: Cherry-pick the merge commit
        id: cherry_pick_commit
        if: steps.check_comment.outputs.branch != 'none'
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = core.getInput('branch');
            const mergeCommitSha = context.payload.pull_request.merge_commit_sha;
            const prNumber = context.payload.pull_request.number;
            const newBranch = `cherry-pick/${prNumber}-${mergeCommitSha}`;
            
            await exec(`git checkout -b ${newBranch} origin/${branchName}`);
            await exec(`git cherry-pick ${mergeCommitSha}`);
            await exec(`git push origin ${newBranch}`);
            
            core.setOutput('new_branch', newBranch);

      - name: Create a pull request
        id: create_pr
        if: steps.check_comment.outputs.branch != 'none'
        uses: actions/github-script@v6
        with:
          script: |
            const newBranch = core.getInput('new_branch');
            const branchName = core.getInput('branch');
            const prNumber = context.payload.pull_request.number;
            const prTitle = `Cherry-pick PR #${prNumber}`;
            const prBody = `This PR cherry-picks commit from PR #${prNumber}`;
            
            const { data: pr } = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              head: newBranch,
              base: branchName,
              body: prBody,
              maintainer_can_modify: true
            });

            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              merge_method: 'squash'
            });

            core.setOutput('pull-request-url', pr.html_url);

      - name: Send webhook notification
        if: steps.check_comment.outputs.branch != 'none'
        uses: actions/github-script@v6
        with:
          script: |
            const webhookUrl = process.env.WEBHOOK_URL;
            const prUrl = core.getInput('pull-request-url');
            const prAuthor = context.payload.pull_request.user.login;
            const prTitle = context.payload.pull_request.title;
            const payload = JSON.stringify({
              pr_url: prUrl,
              pr_author: prAuthor,
              pr_title: prTitle,
              result: "success"
            });

            await require('node-fetch')(webhookUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: payload
            });

      - name: Send failure webhook if cherry-pick fails
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const webhookUrl = process.env.WEBHOOK_URL;
            const prAuthor = context.payload.pull_request.user.login;
            const prTitle = context.payload.pull_request.title;
            const payload = JSON.stringify({
              pr_author: prAuthor,
              pr_title: prTitle,
              result: "failure"
            });

            await require('node-fetch')(webhookUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: payload
            });
